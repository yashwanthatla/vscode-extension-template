import * as vscode from 'vscode';

// Define the interfaces your CommentManager will use.
// It's good practice to have these in a shared types file,
// but for a self-contained example, we'll place them here.
interface CodeReviewSuggestion {
  filePath: string;
  startLine: number;
  endLine: number;
  suggestion: string;
}

interface CodeReview {
  summary: string;
  suggestions: CodeReviewSuggestion[];
}


/**
 * Manages the creation, display, and removal of AI-generated code review comments
 * directly within the VS Code editor.
 */
export class CommentManager implements vscode.Disposable {
    private commentController: vscode.CommentController;
    private threads: vscode.CommentThread[] = [];
    private extensionUri: vscode.Uri;

    /**
     * Initializes the CommentManager and creates the controller.
     * @param extensionUri The URI of the extension, needed for resolving icon paths.
     */
    constructor(extensionUri: vscode.Uri) {
        this.extensionUri = extensionUri;

        // The controller is the top-level entry point for all commenting features.
        this.commentController = vscode.comments.createCommentController(
            'codeowl.aiReview',
            'CodeOwl AI Review'
        );
        
        console.log('CommentManager initialized.');
    }

    /**
     * Takes a code review object from the AI and displays its suggestions as
     * native VS Code comments in the corresponding files.
     * @param review The CodeReview object generated by the LLM.
     */
    public async displayReviewsAsComments(review: CodeReview): Promise<void> {
        // Clear any old comments first to prevent clutter from previous reviews.
        this.clearAllComments();

        if (!review.suggestions || review.suggestions.length === 0) {
            vscode.window.showInformationMessage('CodeOwl AI: No suggestions found. Looks good!');
            return;
        }

        for (const suggestion of review.suggestions) {
            // The file path from the git diff is relative. We need to find its absolute URI
            // within the current workspace to post a comment.
            const fileUris = await vscode.workspace.findFiles(`**/${suggestion.filePath}`, '**/node_modules/**', 1);

            if (fileUris.length === 0) {
                console.warn(`[CodeOwl] Could not find file in workspace: ${suggestion.filePath}`);
                continue; // Skip to the next suggestion
            }
            const fileUri = fileUris[0];

            // Create a range for the comment. VS Code API is 0-indexed, while
            // line numbers from tools like git diff are typically 1-indexed.
            // We subtract 1 to correct for this.
            const startLine = Math.max(0, suggestion.startLine - 1);
            const endLine = Math.max(0, suggestion.endLine - 1);
            
            // Use a large character number for the end of the range to ensure
            // the highlight covers the entire content of the line(s).
            const range = new vscode.Range(startLine, 0, endLine, 1024);

            // Create the comment object itself.
            // This MUST be a plain object literal conforming to the vscode.Comment interface.
            // DO NOT use `new vscode.Comment(...)` as `Comment` is an interface, not a class.
            const comment: vscode.Comment = {
                author: {
                    name: 'CodeOwl AI',
                    iconPath: vscode.Uri.joinPath(this.extensionUri, 'media', 'owl-icon.svg')
                },
                body: new vscode.MarkdownString(suggestion.suggestion),
                mode: vscode.CommentMode.Preview // The comment is read-only
            };

            // A CommentThread is a container for one or more comments at a specific range.
            const thread = this.commentController.createCommentThread(
                fileUri,
                range,
                [comment] // The thread is initialized with our comment
            );

            // Make the comment visible by default.
            thread.collapsibleState = vscode.CommentThreadCollapsibleState.Expanded;

            // Keep track of the thread so we can easily dispose of it later.
            this.threads.push(thread);
        }

        vscode.window.showInformationMessage(`CodeOwl AI: Added ${review.suggestions.length} suggestion(s) to your code.`);
    }

    /**
     * Removes all AI-generated review comments from all files in the editor.
     */
    public clearAllComments(): void {
        console.log(`[CodeOwl] Clearing ${this.threads.length} AI review comment threads...`);
        // The .dispose() method on a CommentThread removes it from the editor.
        this.threads.forEach(thread => thread.dispose());
        // Clear the tracking array.
        this.threads = [];
    }

    /**
     * Cleans up all resources used by the manager. Called when the extension is deactivated.
     */
    public dispose(): void {
        this.clearAllComments();
        this.commentController.dispose();
    }
}